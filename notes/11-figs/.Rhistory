rep("Cardiovascular", 16),
rep("Genetic/metabolic", 6),
rep("Respiratory", 13),
rep("Trauma", 10),
rep("Gastrointestinal", 2),
rep("Immunocompromised", 2)
)
conditions <- fct_relevel(conditions, "Prematurity", "Cardiovascular", "Respiratory", "Trauma", "Neuromuscular", "Genetic/metabolic", "Immunocompromised", "Gastrointestinal")
conditions <- fct_rev(conditions)
conditions_df <- data.frame(conditions = conditions)
rm(conditions)
# bar chart -----------------------------------------------------------
library(ggplot2)
library(ggthemes)
library(viridis) # nicer color palettes
bar <-
ggplot(data = conditions_df, mapping = aes(x = conditions, fill = conditions)) +
geom_bar() +
coord_flip() +
scale_fill_colorblind() +
theme_bw()
# pie chart ---------------------------------------------------------
pie <-
ggplot(data = conditions_df, mapping = aes(x = factor(1), fill = conditions)) +
geom_bar(width=1) +
coord_polar(theta = "y") +
scale_fill_colorblind() +
labs(x = NULL, y = NULL) +
theme_few() +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
panel.border = element_blank())
library(grid)
require(gridExtra)
grid_arrange_shared_legend <- function(..., nrow = 1, ncol = length(list(...)), position = c("bottom", "right")) {
plots <- list(...)
position <- match.arg(position)
g <- ggplotGrob(plots[[1]] + theme(legend.position = position))$grobs
legend <- g[[which(sapply(g, function(x) x$name) == "guide-box")]]
lheight <- sum(legend$height)
lwidth <- sum(legend$width)
gl <- lapply(plots, function(x) x + theme(legend.position = "none"))
gl <- c(gl, nrow = nrow, ncol = ncol)
combined <- switch(position,
"bottom" = arrangeGrob(do.call(arrangeGrob, gl),
legend,
ncol = 1,
heights = unit.c(unit(1, "npc") - lheight, lheight)),
"right" = arrangeGrob(do.call(arrangeGrob, gl),
legend,
ncol = 2,
widths = unit.c(unit(1, "npc") - lwidth, lwidth)))
grid.newpage()
grid.draw(combined)
}
grid_arrange_shared_legend(bar, pie, nrow=1, ncol = 2)
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(MASS)
library(gridExtra)
galaxy <- data.frame(velocity = galaxies)
p1 <- ggplot(data = galaxy, mapping = aes(velocity)) +
geom_histogram(binwidth = 1000, color = "gray20") +
labs(x= "velocity (km/sec)") +
theme(axis.text.x = element_text(size = rel(.8))) +
theme_bw()
p2 <- ggplot(data = galaxy, mapping = aes(velocity)) +
geom_density() +
theme(axis.text.x = element_text(size = rel(.8)))
p3 <- ggplot(data = galaxy, mapping = aes("var", velocity)) +
geom_boxplot() +
labs(x = "", y = "velocity (km/sec)") +
scale_x_discrete(breaks = NULL) +
theme_bw()
grid.arrange(p1, p3, ncol = 2)
choose(13,3) * choose(39, 10) / choose(52, 13)
knitr::opts_chunk$set(echo = TRUE)
library(readr)
tallies <- read_csv("class_tallies.csv")
library(stringr)
library(plyr)
library(reshape2)
library(ggplot2)
### Data wrangling
tallies$Limit[tallies$Limit == 0] <- NA
tallies$term <- factor(sapply(str_split(tallies$`Term Desc`, "  "), `[`, 1))
tallies$year <- as.numeric(sapply(str_split(tallies$`Term Desc`, "  "), `[`, 2))
tallies$term <- factor(tallies$term, levels = levels(tallies$term)[c(1, 3, 2)])
tallies$Term.Desc2 <- str_c(str_extract(tallies$Term.Desc, "[A-Z]{1}"), str_sub(tallies$year, start = 3, end = 4), sep = "")
tallies <- arrange(tallies, term, year)
tallies.split <- split(tallies, tallies$`Term Code`)
tallies.split <- lapply(1:length(tallies.split),
function(x){
df <- tallies.split[[x]]
df$time <- x
return(df)
})
tallies <- do.call('rbind', tallies.split)
tallies <- mutate(tallies, prop.enroll = Enrolled / Limit)
stats <- subset(tallies, `Course Nbr` %in% c(107, 117, 207, 217, 440, 445))
## Adding 2016-2016 loads
library(rvest)
tab_parse <- read_html("http://www.lawrence.edu/academics/study/mathematics/class_schedule")
str(tab_parse)
tabNodes <- html_nodes(tab_parse, "table")
tabNodes
tab1 <- html_table(tabNodes, header = TRUE, fill = TRUE)[[1]]
tab2 <- html_table(tabNodes, header = TRUE, fill = TRUE)[[2]]
tab3 <- html_table(tabNodes, header = TRUE, fill = TRUE)[[3]]
current <- rbind(tab1, tab2, tab3)
library(tidyr)
current <- separate(data = current, col = `Enrollment Limit`, into = c("limit", "registered"), sep =" ")
current$limit <- extract_numeric(current$limit)
current$registered <- extract_numeric(current$registered)
library(dplyr)
current <- filter(current, is.na(registered) == FALSE)
op1 <- 10*12*choose(15,3)
op2 <- 10*choose(12,2)*choose(15,2)
op3 <- choose(10,2)*choose(12,1)*choose(15,2)
op4 <- 10*choose(12,3)*15
op5 <- choose(10,3)*12*15
op6 <- choose(10,2)*choose(12,2)*15
sum(op1,op2,op3,op4,op5,op6)
sum(op1,op2,op3,op4,op5,op6)/choose(37,5)
10*12*15*choose(22,2)
(10*12*15*choose(22,2))/choose(37,5)
(10*12*15*choose(34,2))/choose(37,5)
install.packages("googlesheets")
knitr::opts_chunk$set(echo = TRUE)
library(googlesheets)
?googlesheets
my_sheets <- gs_ls()
my_sheets <- gs_ls()
my_sheets
arbitrary <- my_sheets %>% gs_ls("Fall 2016 Schedule")
library(dplyr)
arbitrary <- my_sheets %>% gs_ls("Fall 2016 Schedule")
my_sheets
my_sheets %>% glimpse()
View(my_sheets)
arbitrary <- my_sheets %>% gs_ls("2016 Democratic Delegate Count")
arbitrary <- gs_title"2016 Democratic Delegate Count")
arbitrary <- gs_title("2016 Democratic Delegate Count")
arbitrary <- gs_title("2016 Democratic Delegate Count") %>%
gs_read()
View(arbitrary)
gettysburg <- read.csv("data/gettysburg.csv", as.is = TRUE)
gettysburg <- read.csv("data/gettysburg.csv", as.is = TRUE)
f <- function(p, n) p / (p + (1-p)/n)
f(.5, 10)
f2 <- function(p,n) 1/(p + (1/n))
f2(.5, 10)
.7-.24
.18/.46
.98/.99
35-8.5
install.packages("arm")
library(arm)
?arm
help(package="arm")
`2015_sqf_csv` <- read.csv("~/Downloads/2015_sqf_csv.csv")
View(`2015_sqf_csv`)
sqf <- read.csv("~/Downloads/2015_sqf_csv.csv")
View(`2015_sqf_csv`)
head(sqf)
library(CarletonStats)
?permTest
permTest(ViolentCrime ~ DeathPenalty, data = states03, alt = "less", B="100000")
permTest(ViolentCrime ~ DeathPenalty, data = states03, alt = "less", B="100001")
permTest(ViolentCrime ~ DeathPenalty, data = states03, alt = "less", B="999999")
colleges <- read.csv("colleges.csv")
library(ggplot2)
library(dplyr)
library(CarletonStats)
library(mosaic)
mlb2016 <- read.csv("data/mlb2016.csv")
library(Lock5Data)
data("CocaineTreatment")
library(mosaic)
head(CocaineTreatment)
summary(CocaineTreatment)
jdata <- filter(CocaineTreatment, Placebo != "Placebo")
library(dplyr)
jdata <- filter(CocaineTreatment, Placebo != "Placebo")
jdata <- filter(CocaineTreatment, Drug != "Placebo")
jdata$Drug <- as.factor(jdata$Drug, drop = TRUE)
jdata$Drug <- as.factor(jdata$Drug)
?as.factor
jdata$Drug <- factor(as.character(jdata$Drug))
diffmean(Relapse == "yes" ~ Drug, data = jdata)
diffpropr(Relapse == "yes" ~ Drug, data = jdata)
diffprop(Relapse == "yes" ~ Drug, data = jdata)
install.packages("moasic")
install.packages("mosaic")
install.packages("mosaic")
library(mosaic)
diffmean(Relapse == "yes" ~ Drug, data = jdata)
diffprop(Relapse == "yes" ~ Drug, data = jdata)
n <- 10
p <- .6
dbinom(x = 0:10, size = n, prob = p)
dbinom(x = 0:10, size = n, prob = 1-p)
1-dbinom(x = 0:10, size = n, prob = p)
choose(6,2)(1/2)^6
choose(6,2)*(1/2)^6
35-17.5
do()
do(1000)
library(LearnBayes)
betabar
?LearnBayes
pbetat()
pbetat
?pbetat
?betapar
binomial.beta.mix
s = 7
f = 3
N = 2
betapar = rbind(c(6,14), c(14,6))
betapar
post.betapar = betapar + outer(rep(1, N), data)
data = c(7,3)
post.betapar = betapar + outer(rep(1, N), data)
post.betapar
p = post.betapar[, 1]/(post.betapar[, 1] + post.betapar[,
2])
p
post.betapar[, 1]
(post.betapar[, 1] + post.betapar[,
+                                                         2])
citation()
citation("HLMdiag")
choose(5,2)
choose(5,3)
p = .8
p/(1-p)
1 - (1/(1-p))
alpha = c(728, 584, 138)
theta = rdirichlet(1, alpha)
library(LearnBayes)
theta = rdirichlet(1, alpha)
theta
theta = rdirichlet(2, alpha)
theta
library(CarletonStats)
?boot
boot(ToothGrowth$len)
sum(13,10,15,9)
47-23.5
47-9.5
score <- function() 47 - sum(scan())
score()
score()
library(lmeresampler)
citation("lmeresampler")
# Load the necessary packages
library(readxl)
library(dplyr)
library(stringr)
# Function rescaling homeworks that are out of 5 pts to the 100 pt scale
rescale_hw <- function(score)
{
60 + ((score %/% 1) - 1) * 10 + (score %% 1) * 10
}
# Function calculating HW avg, dropping `n.drop` lowest scores
hw_avg <- function(scores, n.drop = 2) {
if(n.drop > 0) hw <- sort(scores)[-c(1:n.drop)]
else hw <- scores
avg <- mean(as.numeric(hw), na.rm = TRUE)
pct <- rescale_hw(avg)
return(pct)
}
# Read in the gradebook
gradebook <- read_excel("MATH107-5244-F16 Grades.xlsx", sheet = 1, na = "-")
# Drop folks that are not actually enrolled (e.g. graders and tutors)
emails_to_drop <- c("rylo.j.ashmore@lawrence.edu", "eryn.blagg@lawrence.edu",
"israel.deltoro@lawrence.edu", "hamza.ehsan@lawrence.edu",
"felix.henriksson@lawrence.edu", "victoria.passie@lawrence.edu",
"siyi.sun@lawrence.edu", "minh.q.ta@lawrence.edu",
"sophia.m.carter@lawrence.edu","rosanne.c.lam@lawrence.edu")
gradebook <- filter(gradebook, !`Email address` %in% emails_to_drop)
# Replacing HW0 score for completion
gradebook <- mutate(gradebook, HW0 = ifelse(is.na(`Quiz:HW0 (Real)`), 0, 5))
# Preparing for grade calculation
new_colnames <- strsplit(colnames(gradebook), " ", fixed = TRUE)
new_colnames <- sapply(new_colnames, "[", 1)
new_colnames[which(new_colnames == "Last")][2] <- "Last accessed"
colnames(gradebook) <- new_colnames
# Calculating the averages
grade_summaries <- gradebook %>%
group_by(Email) %>%
mutate(hw_avg = hw_avg(scores = c(HW0, HW1, HW2, HW3, HW4, HW5, HW6)),
lab_avg = hw_avg(score = c(Lab1, Lab2, Lab3, Lab4), n.drop = 0),
quiz_avg = 100*sum(c(`Quiz:2.3-2.4`, `Quiz:Graphics`, `Quiz:2.1-2.3`, `Quiz:1.2`, `Quiz:1.3`,
`Quiz:3.1/3.2`, `Quiz:3.3`, `Quiz:4.2/4.3`), na.rm = TRUE) / 25,
exam_avg = 100*Exam1/50,
midterm_avg = .05 * quiz_avg + .1 * lab_avg + .25 * hw_avg + .6 * exam_avg)
setwd("~/Documents/m107/notes/11-figs")
mpg <- read.table("https://dl.dropboxusercontent.com/u/5094866/m217/data/MPGdata.txt", header = TRUE)
head(mpg) # first 6 rows
dim(mpg)  # no. rows, no. columns
library(ggplot2)
ggplot(data = mpg, mapping = aes(x = Weight, y = MPG)) +
geom_point()
ggplot(data = mpg, mapping = aes(x = Weight, y = MPG)) +
geom_point() +
labs(x = "Weight (lbs)", y = "Fuel economy (mpg)")
ggplot(data = mpg, mapping = aes(x = Weight, y = MPG)) +
geom_point() +
labs(x = "Weight (lbs)", y = "Fuel economy (mpg)") +
theme_minimal()
mpg_scatter <-
ggplot(data = mpg, mapping = aes(x = Weight, y = MPG)) +
geom_point() +
labs(x = "Weight (lbs)", y = "Fuel economy (mpg)") +
theme_minimal()
dir()
mgmpg
ggsave(mpg_scatter, filename = "mpg_scatterplot.pdf", width = 5, height = 5)
cor(mpg$Weight, mpg$MPG)
?cor
library(CarletonStats)
?CarletonStats
?permTest
corDemo()
cor(mpg$Weight, mpg$MPG)
library(mosaic)
cor(MPG ~ Weight, data = mpg)
library(mosaic)
cor(MPG ~ Weight, data = mpg)
mod <- lm(MPG ~ Weight, data = mpg)
summary(mod)
ggplot(data = mpg, mapping = aes(x = Weight, y = MPG)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
labs(x = "Weight (lbs)", y = "Fuel economy (mpg)") +
theme_minimal()
mpg_fitted <-
ggplot(data = mpg, mapping = aes(x = Weight, y = MPG)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
labs(x = "Weight (lbs)", y = "Fuel economy (mpg)") +
theme_minimal()
ggsave(mpg_fitted, filename = "mpg_fitted_scatterplot.pdf", width = 5, height = 5)
ggsave(mpg_scatter, filename = "mpg_scatterplot.pdf", width = 3, height = 5)
ggsave(mpg_fitted, filename = "mpg_fitted_scatterplot.pdf", width = 3, height = 5)
ggsave(mpg_scatter, filename = "mpg_scatterplot.pdf", width = 5, height = 3)
ggsave(mpg_fitted, filename = "mpg_fitted_scatterplot.pdf", width = 5, height = 3)
cor(MPG ~ Weight, data = mpg)
mod <- lm(MPG ~ Weight, data = mpg)
summary(mod)
ls.df <- data.frame(y.hat = as.numeric(fit), y = mpg$MPG, x = mpg$Weight)
ls.df$ymin <- as.numeric(apply(ls.df, 1, FUN = function(x) min(x["y.hat"], x["y"])))
ls.df$ymax <- as.numeric(apply(ls.df, 1, FUN = function(x) max(x["y.hat"], x["y"])))
fit <- fitted(mod)
ls.df <- data.frame(y.hat = as.numeric(fit), y = mpg$MPG, x = mpg$Weight)
ls.df$ymin <- as.numeric(apply(ls.df, 1, FUN = function(x) min(x["y.hat"], x["y"])))
ls.df$ymax <- as.numeric(apply(ls.df, 1, FUN = function(x) max(x["y.hat"], x["y"])))
ggplot(data = mpg, aes(x = Weight, y = MPG)) +
geom_linerange(aes(ymin = ymin, ymax = ymax, x = x), data = ls.df, inherit.aes = FALSE, colour = I("gray60")) +
geom_point() +
geom_smooth(method = "lm", se = FALSE)
ggplot(data = mpg, aes(x = Weight, y = MPG)) +
geom_linerange(aes(ymin = ymin, ymax = ymax, x = x), data = ls.df, inherit.aes = FALSE, colour = I("gray60")) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
labs(x = "Weight (lbs)", y = "Fuel economy (mpg)") +
theme_minimal()
least_squares <-
ggplot(data = mpg, aes(x = Weight, y = MPG)) +
geom_linerange(aes(ymin = ymin, ymax = ymax, x = x), data = ls.df, inherit.aes = FALSE, colour = I("gray60")) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
labs(x = "Weight (lbs)", y = "Fuel economy (mpg)") +
theme_minimal()
ggsave(least_squares, filename = "least_squares.pdf", width = 5, height = 3)
ggplot(data = mpg, mapping = aes(x = Weight, y = MPG)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
labs(x = "Weight (lbs)", y = "Fuel economy (mpg)") +
theme_minimal() +
xlim(0, 20000)
ggplot(data = mpg, mapping = aes(x = Weight, y = MPG)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
labs(x = "Weight (lbs)", y = "Fuel economy (mpg)") +
theme_minimal() +
xlim(0, 5000)
ggplot(data = mpg, mapping = aes(x = Weight, y = MPG)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, fullrange=TRUE) +
labs(x = "Weight (lbs)", y = "Fuel economy (mpg)") +
theme_minimal() +
xlim(0, 5000)
ggplot(data = mpg, mapping = aes(x = Weight, y = MPG)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, fullrange=TRUE) +
labs(x = "Weight (lbs)", y = "Fuel economy (mpg)") +
theme_minimal() +
xlim(-10, 5000)
?geom_point
ggplot(data = mpg, mapping = aes(x = Weight, y = MPG)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, fullrange=TRUE) +
geom_point(data = data.frame(Weight = 0, MPG = 0), shape = 1, size = 3) +
labs(x = "Weight (lbs)", y = "Fuel economy (mpg)") +
theme_minimal() +
xlim(-10, 5000)
fitted
fit
mod
ggplot(data = mpg, mapping = aes(x = Weight, y = MPG)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, fullrange=TRUE) +
geom_point(data = data.frame(Weight = 0, MPG = fit[1]), shape = 1, size = 3) +
labs(x = "Weight (lbs)", y = "Fuel economy (mpg)") +
theme_minimal() +
xlim(-10, 5000)
fit[1]
fit[2]
fit
mod
ggplot(data = mpg, mapping = aes(x = Weight, y = MPG)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, fullrange=TRUE) +
geom_point(data = data.frame(Weight = 0, MPG = coef(mod)[1]), shape = 1, size = 3) +
labs(x = "Weight (lbs)", y = "Fuel economy (mpg)") +
theme_minimal() +
xlim(-10, 5000)
ggplot(data = mpg, mapping = aes(x = Weight, y = MPG)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, fullrange=TRUE) +
geom_point(data = data.frame(Weight = 0, MPG = coef(mod)[1]), shape = 1, size = 3, color = "red") +
labs(x = "Weight (lbs)", y = "Fuel economy (mpg)") +
theme_minimal() +
xlim(-10, 5000)
plot(data = mpg, mapping = aes(x = Weight, y = MPG)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, fullrange=TRUE) +
geom_point(data = data.frame(Weight = 0, MPG = coef(mod)[1]), shape = 1, size = 3, color = "red", width = 2) +
labs(x = "Weight (lbs)", y = "Fuel economy (mpg)") +
theme_minimal() +
xlim(-10, 5000)
gplot(data = mpg, mapping = aes(x = Weight, y = MPG)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, fullrange=TRUE) +
geom_point(data = data.frame(Weight = 0, MPG = coef(mod)[1]), shape = 1, size = 3, color = "red", width = 2) +
labs(x = "Weight (lbs)", y = "Fuel economy (mpg)") +
theme_minimal() +
xlim(-10, 5000)
ggplot(data = mpg, mapping = aes(x = Weight, y = MPG)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, fullrange=TRUE) +
geom_point(data = data.frame(Weight = 0, MPG = coef(mod)[1]), shape = 1, size = 3, color = "red", width = 2) +
labs(x = "Weight (lbs)", y = "Fuel economy (mpg)") +
theme_minimal() +
xlim(-10, 5000)
?geom_point
ggplot(data = mpg, mapping = aes(x = Weight, y = MPG)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, fullrange=TRUE) +
geom_point(data = data.frame(Weight = 0, MPG = coef(mod)[1]), shape = 1, size = 4, color = "red", width = 2) +
labs(x = "Weight (lbs)", y = "Fuel economy (mpg)") +
theme_minimal() +
xlim(-10, 5000)
ggplot(data = mpg, mapping = aes(x = Weight, y = MPG)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, fullrange=TRUE) +
geom_point(data = data.frame(Weight = 0, MPG = coef(mod)[1]), shape = 1, size = 4, color = "red") +
labs(x = "Weight (lbs)", y = "Fuel economy (mpg)") +
theme_minimal() +
xlim(-10, 5000)
ggplot(data = mpg, mapping = aes(x = Weight, y = MPG)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, fullrange=TRUE) +
geom_point(data = data.frame(Weight = 0, MPG = coef(mod)[1]), shape = 1, size = 4, color = "red") +
labs(x = "Weight (lbs)", y = "Fuel economy (mpg)") +
theme_minimal() +
xlim(-10, 4000)
intercept <-
ggplot(data = mpg, mapping = aes(x = Weight, y = MPG)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, fullrange=TRUE) +
geom_point(data = data.frame(Weight = 0, MPG = coef(mod)[1]), shape = 1, size = 4, color = "red") +
labs(x = "Weight (lbs)", y = "Fuel economy (mpg)") +
theme_minimal() +
xlim(-10, 4000)
ggsave(intercept, filename = "intercept.pdf", width = 5, height = 3)
intercept
ggplot(data = mpg, mapping = aes(x = Weight, y = MPG)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, fullrange=TRUE) +
# geom_point(data = data.frame(Weight = 0, MPG = coef(mod)[1]), shape = 1, size = 4, color = "red") +
labs(x = "Weight (lbs)", y = "Fuel economy (mpg)") +
theme_minimal() +
xlim(1500, 20000)
extrapolation <-
ggplot(data = mpg, mapping = aes(x = Weight, y = MPG)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, fullrange=TRUE) +
labs(x = "Weight (lbs)", y = "Fuel economy (mpg)") +
theme_minimal() +
xlim(1500, 20000)
ggsave(extrapolation, filename = "extrapolation.pdf", width = 5, height = 3)
